// -*-  ESP-8266 (12F)  ->  d1 mini pro  -*-
// Links: https://github.com/TerrificTable/microcontroller_stuff/blob/main/Links.md


// Nessesary for some stuff and to not get errors
#include <Arduino.h>  // Standard Arduino Library
#include <Wire.h>     // Wire, not sure what it does
#include <SPI.h>      // I dont even know what its supposed to mean


// Library for the screen
#include <Adafruit_SSD1306.h>



// Set pins
#define SDA             D1    // SDA pin
#define SCL             D2    // SCL pin

// 128x64 oled screen
#define OLED_RESET      0     // Reset Pin, not sure for what tho, but it needs to be defined
#define SCREEN_WIDTH    128
#define SCREEN_HEIGHT   64

// Set display variable
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);



// My Logo/Profile Picture in bytes/bits/hex/whatever (black & gray & white)
static const uint8_t image_data_array[488] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0x57, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfe, 0xa5, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfa, 0xa2, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfd, 0x45, 0x7f, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xf0, 0xa0, 0xbf, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xe8, 0x40, 0xef, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xa8, 0x00, 0x57, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xe0, 0x00, 0x15, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xa1, 0x00, 0x0b, 0x7f, 0xff, 0xf0, 
  0xff, 0xff, 0x41, 0x40, 0x00, 0xbf, 0xff, 0xf0, 
  0xff, 0xff, 0x81, 0xff, 0x00, 0x5f, 0xff, 0xf0, 
  0xff, 0xff, 0x02, 0xff, 0xe8, 0x17, 0xff, 0xf0, 
  0xff, 0xfd, 0x03, 0xff, 0xfe, 0x01, 0xff, 0xf0, 
  0xff, 0xfe, 0x05, 0xff, 0xfd, 0x05, 0xff, 0xf0, 
  0xff, 0xf5, 0x0f, 0xff, 0xfe, 0xa2, 0xff, 0xf0, 
  0xff, 0xfa, 0x1f, 0xff, 0xfd, 0x01, 0xff, 0xf0, 
  0xff, 0xd4, 0x2f, 0xff, 0xfe, 0x01, 0x7f, 0xf0, 
  0xff, 0xf0, 0x31, 0xff, 0xff, 0x01, 0x7f, 0xf0, 
  0xff, 0xa8, 0x20, 0xaf, 0xfd, 0x80, 0xbf, 0xf0, 
  0xff, 0xf0, 0x40, 0xd5, 0x57, 0xe0, 0xff, 0xf0, 
  0xff, 0xa8, 0x00, 0x02, 0x5d, 0x50, 0x5f, 0xf0, 
  0xff, 0xb0, 0x20, 0x00, 0x02, 0xb0, 0x5f, 0xf0, 
  0xff, 0xa0, 0x00, 0x00, 0x00, 0x08, 0x3f, 0xf0, 
  0xff, 0x50, 0x00, 0x00, 0x01, 0x00, 0x57, 0xf0, 
  0xff, 0xc1, 0x40, 0x00, 0x00, 0x00, 0x1f, 0xf0, 
  0xfe, 0x81, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xf0, 
  0xff, 0x01, 0xa0, 0x00, 0x00, 0x00, 0x17, 0xf0, 
  0xfd, 0x46, 0xa0, 0x00, 0x00, 0x00, 0x2f, 0xf0, 
  0xff, 0x8a, 0x80, 0x00, 0x00, 0x00, 0x1f, 0xf0, 
  0xff, 0x45, 0x00, 0x3a, 0xaa, 0x00, 0x2f, 0xf0, 
  0xff, 0x80, 0x00, 0x55, 0xea, 0x00, 0x5f, 0xf0, 
  0xff, 0x40, 0x00, 0x7b, 0x55, 0x20, 0x2f, 0xf0, 
  0xff, 0xa0, 0x00, 0xbf, 0xf6, 0x00, 0x5f, 0xf0, 
  0xff, 0xc0, 0x01, 0x7f, 0xfd, 0x10, 0xaf, 0xf0, 
  0xff, 0xd0, 0x02, 0xff, 0xfe, 0x00, 0x5f, 0xf0, 
  0xff, 0xaa, 0x01, 0xff, 0xff, 0x00, 0xaf, 0xf0, 
  0xff, 0xd4, 0x02, 0xff, 0xde, 0x00, 0x7f, 0xf0, 
  0xff, 0xb5, 0x03, 0xff, 0x1e, 0x00, 0xaf, 0xf0, 
  0xff, 0xea, 0x05, 0xfe, 0x1a, 0x01, 0x7f, 0xf0, 
  0xff, 0xb6, 0x83, 0xfe, 0x14, 0x08, 0xbf, 0xf0, 
  0xff, 0xf7, 0x01, 0xf4, 0x10, 0x01, 0xff, 0xf0, 
  0xff, 0xf6, 0x41, 0x3c, 0x00, 0x09, 0x7f, 0xf0, 
  0xff, 0xf6, 0x21, 0x14, 0x00, 0x15, 0xff, 0xf0, 
  0xff, 0xf6, 0x60, 0x14, 0x00, 0x0a, 0xff, 0xf0, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x57, 0xff, 0xf0, 
  0xff, 0xfd, 0x40, 0x00, 0x00, 0xad, 0xff, 0xf0, 
  0xff, 0xff, 0xa0, 0x00, 0x01, 0x57, 0xff, 0xf0, 
  0xff, 0xff, 0x50, 0x00, 0x01, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xe0, 0x00, 0x02, 0xbf, 0xff, 0xf0, 
  0xff, 0xff, 0xd4, 0x00, 0x0b, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfa, 0x00, 0x12, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xf5, 0x00, 0x17, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0x40, 0x2b, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfd, 0xa0, 0x57, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0x54, 0xaf, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0xac, 0xd7, 0xff, 0xff, 0xf0, 
};





// Setup
void setup() {
    // 115200 baud rate
    Serial.begin(115200);
    delay(100);
    // print on serial
    Serial.println("\nStarting...");
    
    // Initialize screen
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    display.clearDisplay();
}

void loop() {
    
    // Update display every 60secs / 1min
    static unsigned long    Timer       = 0;

    if (millis() > Timer ) {
      
      
        Timer = millis() + 60000;
      

        // IMAGE
        display.drawBitmap(0, 2, image_data_array, 60, 60, 1); // Draw Image
        // fill corners since image isnt 60x64
        display.fillRect(0, 0, 60, 2, WHITE);
        display.fillRect(0, 62, 60, 64, WHITE);


        // GITHUB TEXT
        // set text color and size
        display.setTextColor(1);
        display.setTextColor(WHITE);
        
        // Place cursor in the middle (of whats left of the screen)
        display.setCursor(80, 5);
        display.println("GitHub"); // Write "GitHub"

      
        // Draw a line under "GitHub"
        display.drawLine(70, 17, 128, 17, WHITE);

        // Set cursor under the line
        display.setCursor(73, 22);
        display.println("Terrific"); // Write "Terrific"

        // Set cursor under "Terrific"
        display.setCursor(73, 30);
        display.println("Table"); // Write "Table"



        // BUTTON
        // Set x,y and width and height values for box
        int x = 70;
        int y = 45;
        int w = 55;
        int h = 19;
        
        // draw a rectangular box (with slightly rounded corners)
        display.drawRoundRect(x, y, w, h, 3, WHITE);
        
        // set text side and color again
        display.setTextSize(1);
        display.setTextColor(WHITE);

        // place cursor in the middle of the box
        display.setCursor((w / 2) + x - /* String length */ 18, 
                          (h / 2) + y - /* Font height   */ 4);
        display.println("Follow"); // Write "Follow"


        // Update display
        display.display();

    }
}
